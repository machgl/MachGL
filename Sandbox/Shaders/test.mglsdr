%vertex_shader  

#version 450 core

#define MAX_LIGHTS 12

layout (location = 0) in vec4 position;
layout (location = 1) in vec2 uv;
layout (location = 2) in float tid;
layout (location = 3) in vec4 normal;
layout (location = 4) in vec4 color;
layout (location = 5) in float shine;
layout (location = 6) in float reflectivity;
layout (location = 7) in float textureScale;

struct Light {

    vec4 _light_color;
    vec4 _light_position;
    vec4 _light_attenuation;
    vec4 _light_brightness;
};

layout (std140, binding = 0) uniform Matrices {

    mat4 projection;
    mat4 view;
};

layout (std140, binding = 1) uniform Lights {

    Light lights[MAX_LIGHTS];
};

uniform vec3 _camera_position = vec3(0.0);
uniform mat4 _tr_matrix = mat4(1.0);

out DATA {

    vec4 pos;
    vec2 uv;
    float tid;
    vec4 col;
    vec3 surfaceNormal; 
    vec3 toLightVector[MAX_LIGHTS];
    vec3 toCameraVector;
    float shine;
    float reflectivity;
    vec3 reflectedVector;

} vs_out;


void main () {

    vec4 tmp_color = vec4(1);
    vec4 tmp_position = vec4(0);
    vec4 tmp_attenuation = vec4(1, 0, 0, 1);
    vec4 tmp_brightness = vec4(1);

    vec4 worldPosition =  _tr_matrix * position;
    vec4 posRelativeToCamera = view * worldPosition;
    gl_Position = projection * posRelativeToCamera;

    vs_out.pos = posRelativeToCamera;
    vs_out.uv = uv * textureScale;
    vs_out.col = color;
    vs_out.tid = tid;
    vs_out.surfaceNormal = (_tr_matrix * normal).xyz;
    vs_out.toCameraVector = (inverse(view) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
    vs_out.shine = shine;
    vs_out.reflectivity = reflectivity;

    vec3 viewNormal = mat3(transpose(inverse(_tr_matrix))) * normal.xyz;
    vec3 viewVector = normalize(worldPosition.xyz - _camera_position);

    vs_out.reflectedVector = reflect(viewVector, normalize(viewNormal));

    for (int i = 0; i < MAX_LIGHTS; i++) {

        vs_out.toLightVector[i] = lights[i]._light_position.xyz - worldPosition.xyz;
    }
}

%fragment_shader

#version 450 core

#define MAX_LIGHTS 12

struct Light {

    vec4 _light_color;
    vec4 _light_position;
    vec4 _light_attenuation;
    vec4 _light_brightness;
};

layout (std140, binding = 1) uniform Lights {

    Light lights[MAX_LIGHTS];
};

layout (location = 0) out vec4 color;
layout (location = 1) out vec4 bloomColor;

layout (binding = 0) uniform sampler2D _texture;
layout (binding = 1) uniform samplerCube _environmentMap;

in DATA {

    vec4 pos;
    vec2 uv;
    float tid;
    vec4 col;
    vec3 surfaceNormal; 
    vec3 toLightVector[MAX_LIGHTS];
    vec3 toCameraVector;
    float shine;
    float reflectivity;
    vec3 reflectedVector;

} fs_in;

void main() {

    vec4 texColor = fs_in.col;
        
    if (fs_in.tid != 0) {
        texColor = texture(_texture, fs_in.uv);
    }
    
    vec3 unitNormal = normalize(fs_in.surfaceNormal);
    vec3 unitVectorToCamera = normalize(fs_in.toCameraVector);
    
    vec4 totalDiffuse = vec4(0.0);
    vec4 totalSpecular = vec4(0.0);

    for (int i = 0; i < MAX_LIGHTS; i++) {

        float dist = length(fs_in.toLightVector[i]);
        float attFactor = lights[i]._light_attenuation.x + (lights[i]._light_attenuation.y * dist) + (lights[i]._light_attenuation.z * dist * dist);

        vec3 unitLightVector = normalize(fs_in.toLightVector[i]);

        float nDotl = dot(unitNormal, unitLightVector);
        float brightness = max(nDotl, 0.0) * min(lights[i]._light_brightness.x, 1.0);

        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, fs_in.shine);

        totalDiffuse = totalDiffuse + (brightness * lights[i]._light_color) / attFactor;
        totalSpecular = totalSpecular + (dampedFactor * fs_in.reflectivity * lights[i]._light_color) / attFactor;
    }

    totalDiffuse = max(totalDiffuse, 0.2);

    vec4 reflectedColor = texture(_environmentMap, fs_in.reflectedVector);
    vec4 outColor = totalDiffuse * texColor + totalSpecular;
    color = mix(outColor, reflectedColor, fs_in.reflectivity);
}