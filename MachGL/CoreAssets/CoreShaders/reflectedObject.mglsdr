%vertex_shader

#version 420 core

#define MAX_LIGHTS 12

layout (location = 0) in vec4 position;
layout (location = 1) in vec2 uv;
layout (location = 2) in float tid;
layout (location = 3) in vec4 normal;
layout (location = 4) in vec4 color;
layout (location = 5) in float shine;
layout (location = 6) in float reflectivity;
layout (location = 7) in float textureScale;

layout (std140, binding = 2) uniform Matrices {
    
    mat4 projection;
}; 

uniform mat4 _tr_matrix = mat4(1.0);
uniform mat4 _vw_matrix = mat4(1.0);
uniform vec3 _camera_position;

out DATA {

    vec4 pos;
    vec2 uv;
    float tid;
    vec4 col;
    float shine;
    float reflectivity;
    vec3 reflectedVector;

} vs_out;

void main () {

    vec4 worldPosition =  _tr_matrix * position;
    vec4 posRelativeToCamera = _vw_matrix * worldPosition;
    gl_Position = projection * posRelativeToCamera;

    vs_out.pos = posRelativeToCamera;
    vs_out.uv = uv * textureScale;
    vs_out.col = color;
    vs_out.tid = tid;
    vs_out.shine = shine;
    vs_out.reflectivity = reflectivity;

    vec3 viewNormal = mat3(transpose(inverse(_tr_matrix))) * normal.xyz;
    vec3 viewVector = normalize(worldPosition.xyz - _camera_position);

    vs_out.reflectedVector = reflect(viewVector, normalize(viewNormal));
}

%fragment_shader

#version 420 core

layout (location = 0) out vec4 color;
layout (binding = 0) uniform sampler2D _texture;
layout (binding = 1) uniform samplerCube _environmentMap;

in DATA {

    vec4 pos;
    vec2 uv;
    float tid;
    vec4 col;
    float shine;
    float reflectivity;
    vec3 reflectedVector;

} fs_in;

void main() {

    vec4 reflectedColor = texture(_environmentMap, fs_in.reflectedVector);
    vec4 outColor = texture(_texture, fs_in.uv);
    color = mix(outColor, reflectedColor, fs_in.reflectivity);
}